export default "Ly8gaW1wb3J0U2NyaXB0cygic2t1bHB0Lm1pbi5qcyIsICJza3VscHQtc3RkbGliLmpzIikKcG9zdE1lc3NhZ2UoeyB0eXBlOiAicmVhZHkiIH0pCgpsZXQgcHJpbnRCdWZmZXIgPSBbXQpsZXQgaW50ZXJ2YWxJZCA9IG51bGwKY29uc3QgYmF0Y2hTaXplID0gMjAwCmxldCBydW5uaW5nID0gZmFsc2UKbGV0IHRlc3RpbmcgPSBmYWxzZQoKLy8gdXNlZCB0byBjaGVjayBpZiBhIGNvbnRyb2wgbWVzc2FnZSAiaW5wdXRfcmVxdWlyZWQiIGhhcyBiZWVuIGFwcGVuZGVkIHRvIGJ1ZmZlcgpjb25zdCBjaGVja0Zvck1zZyA9ICgpID0+IHsKICBsZXQgbXNnT2JqZWN0ID0gbnVsbAogIGlmICh0eXBlb2YgcHJpbnRCdWZmZXJbcHJpbnRCdWZmZXIubGVuZ3RoIC0gMV0gPT09ICJvYmplY3QiKSB7CiAgICBtc2dPYmplY3QgPSBwcmludEJ1ZmZlci5wb3AoKQogIH0KICByZXR1cm4gbXNnT2JqZWN0Cn0KCmNvbnN0IGludGVydmFsTWFuYWdlciA9IHJ1bkludGVydmFsID0+IHsKICBpZiAoaW50ZXJ2YWxJZCkgewogICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKQogIH0KICBpZiAocnVuSW50ZXJ2YWwpIHsKICAgIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgIGlmIChwcmludEJ1ZmZlci5sZW5ndGggPiAwKSB7CiAgICAgICAgbGV0IG1zZ09iamVjdCA9IG51bGwKICAgICAgICBpZiAocHJpbnRCdWZmZXIubGVuZ3RoIDw9IGJhdGNoU2l6ZSkgewogICAgICAgICAgbXNnT2JqZWN0ID0gY2hlY2tGb3JNc2coKQogICAgICAgIH0KICAgICAgICBjb25zdCBiYXRjaCA9IHByaW50QnVmZmVyLnNwbGljZSgwLCBiYXRjaFNpemUpCiAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiAicHJpbnRfYmF0Y2giLCBtc2c6IGJhdGNoIH0pCiAgICAgICAgaWYgKG1zZ09iamVjdCkgcG9zdE1lc3NhZ2UobXNnT2JqZWN0KQogICAgICB9CiAgICAgIGlmICghcnVubmluZyAmJiBwcmludEJ1ZmZlci5sZW5ndGggPT09IDApIHsKICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpCiAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiAicHJpbnRfZG9uZSIgfSkKICAgICAgfQogICAgfSwgMTAwKQogIH0KfQoKbGV0IHRlc3RSZXN1bHRzID0gW10KbGV0IHRlc3RQb2ludHMgPSBbXQovLyBSdW5uaW5nIHRlc3RzIHJlcXVpcmVzIHZlcmJvc2l0eSA+IDEgZnJvbSB1bml0dGVzdAovLyBNYWtlIHN1cmUgdG8gcnVuIHdpdGggY29tbWFuZCB1bml0dGVzdC5tYWluKDIpIG9yIGVxdWFsCmNvbnN0IGhhbmRsZVRlc3RPdXRwdXQgPSB0ZXh0ID0+IHsKICBjb25zb2xlLmxvZyh0ZXh0KQogIGlmICh0ZXh0LnN0YXJ0c1dpdGgoIlJ1bm5pbmciKSkgewogICAgY29uc3QgdGVzdE5hbWUgPSB0ZXh0LnNwbGl0KCIgIilbMl0KICAgIGNvbnN0IG1hdGNoaW5nUG9pbnQgPSB0ZXN0UG9pbnRzLmZpbmQoCiAgICAgIHQgPT4KICAgICAgICB0Lm5hbWUgPT09IHRlc3ROYW1lLnNwbGl0KCIuIilbMF0gfHwgdC5uYW1lID09PSB0ZXN0TmFtZS5zcGxpdCgiLiIpWzFdLAogICAgKQogICAgdGVzdFJlc3VsdHMucHVzaCh7CiAgICAgIHRlc3ROYW1lLAogICAgICBwYXNzZWQ6IHRydWUsCiAgICAgIHBvaW50czogbWF0Y2hpbmdQb2ludCA/IG1hdGNoaW5nUG9pbnQucG9pbnRzIDogIiIsCiAgICB9KQogIH0gZWxzZSBpZiAoCiAgICB0ZXh0LnN0YXJ0c1dpdGgoIkZhaWw6IikgfHwKICAgIHRleHQuc3RhcnRzV2l0aCgiVGVzdCB0aHJldyBleGNlcHRpb24iKQogICkgewogICAgY29uc3QgbGFzdFJlc3VsdCA9IHRlc3RSZXN1bHRzLnBvcCgpCiAgICBjb25zdCB1cGRhdGVkUmVzdWx0ID0geyAuLi5sYXN0UmVzdWx0LCBwYXNzZWQ6IGZhbHNlLCBmZWVkYmFjazogdGV4dCB9CiAgICB0ZXN0UmVzdWx0cy5wdXNoKHVwZGF0ZWRSZXN1bHQpCiAgfSBlbHNlIGlmICh0ZXh0LnN0YXJ0c1dpdGgoIlBvaW50czoiKSkgewogICAgY29uc3QgcG9pbnRPYmogPSBKU09OLnBhcnNlKHRleHQuc2xpY2UoNykpCiAgICB0ZXN0UG9pbnRzLnB1c2gocG9pbnRPYmopCiAgfQp9CgpsZXQgcHJldkRhdGUgPSBudWxsCgpmdW5jdGlvbiBvdXRmKHRleHQpIHsKICBpZiAodGVzdGluZykgewogICAgaGFuZGxlVGVzdE91dHB1dCh0ZXh0KQogIH0gZWxzZSB7CiAgICBwcmludEJ1ZmZlci5wdXNoKHRleHQpCiAgICBjb25zdCBuZXdEYXRlID0gRGF0ZS5ub3coKQogICAgaWYgKG5ld0RhdGUgLSBwcmV2RGF0ZSA+IDUwKSB7CiAgICAgIHBvc3RNZXNzYWdlKHsKICAgICAgICB0eXBlOiAicHJpbnRfYmF0Y2giLAogICAgICAgIG1zZzogcHJpbnRCdWZmZXIuc3BsaWNlKDAsIGJhdGNoU2l6ZSksCiAgICAgIH0pCiAgICAgIHByZXZEYXRlID0gbmV3RGF0ZQogICAgfQogIH0KfQoKZnVuY3Rpb24gYnVpbHRpblJlYWQoeCkgewogIGlmICgKICAgIHNlbGYuU2suYnVpbHRpbkZpbGVzID09PSB1bmRlZmluZWQgfHwKICAgIHNlbGYuU2suYnVpbHRpbkZpbGVzWyJmaWxlcyJdW3hdID09PSB1bmRlZmluZWQKICApCiAgICB0aHJvdyAiRmlsZSBub3QgZm91bmQ6ICciICsgeCArICInIgogIHJldHVybiBTay5idWlsdGluRmlsZXNbImZpbGVzIl1beF0KfQoKZnVuY3Rpb24gcnVuKGNvZGUpIHsKICBpZiAoIWNvZGUgfHwgY29kZS5sZW5ndGggPT09IDApIHJldHVybgogIHNlbGYuU2suZXhlY0xpbWl0ID0gMTAwMDAKICBzZWxmLlNrLmlucHV0ZnVuID0gZnVuY3Rpb24oKSB7CiAgICBwcmludEJ1ZmZlci5wdXNoKHsgdHlwZTogImlucHV0X3JlcXVpcmVkIiB9KQogICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgc2VsZi5hZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIiwgZnVuY3Rpb24oZSkgewogICAgICAgIGlmIChlLmRhdGEudHlwZSA9PT0gImlucHV0IikgewogICAgICAgICAgcmVzb2x2ZShlLmRhdGEubXNnKQogICAgICAgICAgc2VsZi5Tay5leGVjU3RhcnQgPSBuZXcgRGF0ZSgpCiAgICAgICAgfQogICAgICB9KQogICAgfSkKICB9CiAgc2VsZi5Tay5jb25maWd1cmUoewogICAgb3V0cHV0OiBvdXRmLAogICAgcmVhZDogYnVpbHRpblJlYWQsCiAgICBfX2Z1dHVyZV9fOiBzZWxmLlNrLnB5dGhvbjMsCiAgfSkKCiAgc2VsZi5Tay5taXNjZXZhbAogICAgLmFzeW5jVG9Qcm9taXNlKGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gc2VsZi5Tay5pbXBvcnRNYWluV2l0aEJvZHkoIjxzdGRpbj4iLCBmYWxzZSwgY29kZSwgdHJ1ZSkKICAgIH0pCiAgICAudGhlbihlID0+IHsKICAgICAgY29uc29sZS5sb2coInJ1bm5pbmcgc2t1bHB0IGNvbXBsZXRlZCIpCiAgICAgIGlmICh0ZXN0aW5nKSB7CiAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiAidGVzdFJlc3VsdHMiLCBtc2c6IHRlc3RSZXN1bHRzIH0pCiAgICAgICAgdGVzdFJlc3VsdHMgPSBbXQogICAgICAgIHRlc3RQb2ludHMgPSBbXQogICAgICB9CiAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZTogInJlYWR5IiB9KQogICAgfSkKICAgIC5jYXRjaChlID0+IHsKICAgICAgY29uc29sZS5sb2coZSkKICAgICAgcHJpbnRCdWZmZXIucHVzaCh7IHR5cGU6ICJlcnJvciIsIG1zZzogZS50b1N0cmluZygpIH0pCiAgICB9KQogICAgLmZpbmFsbHkoKCkgPT4gewogICAgICBydW5uaW5nID0gZmFsc2UKICAgICAgdGVzdGluZyA9IGZhbHNlCiAgICB9KQp9Cgpjb25zdCBkZWZhdWx0VGVzdCA9IGAKaW1wb3J0IHVuaXR0ZXN0CmltcG9ydCBTdHJpbmdJTwppbXBvcnQgc3lzCgpkZWYgaGVsbG8oKToKICAgIHByaW50KCdIZWxsbyB3b3JsZCEnKQoKZGVmIHBvaW50cygqYXJncyk6CiAgICBkZWYganNvbmlmeV9hcnIoYXJyKToKICAgICAgICByZXR1cm4gc3RyKGFycikucmVwbGFjZSgiJyIsICciJykKCiAgICBkZWYgd3JhcHBlcihmbik6CiAgICAgICAgcHJpbnQoJ1BvaW50czogeyJuYW1lIjogInt9IiwgInBvaW50cyI6IHt9fScuZm9ybWF0KGZuLl9fbmFtZV9fLCBqc29uaWZ5X2FycihsaXN0KGFyZ3MpKSkpCiAgICAgICAgcmV0dXJuIGZuCiAgICByZXR1cm4gd3JhcHBlcgoKY2xhc3MgVGVzdFN0cmluZ01ldGhvZHModW5pdHRlc3QuVGVzdENhc2UpOgoKICAgIEBwb2ludHMoJzEuMScpCiAgICBkZWYgdGVzdF91cHBlcihzZWxmKToKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKCdmb28nLnVwcGVyKCksICdGT08nKQoKICAgIEBwb2ludHMoJzEuMicpCiAgICBkZWYgdGVzdF9pc3VwcGVyKHNlbGYpOgogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZSgnRk9PJy5pc3VwcGVyKCkpCiAgICAgICAgc2VsZi5hc3NlcnRGYWxzZSgnRm9vJy5pc3VwcGVyKCkpCgpjbGFzcyBUZXN0T3RoZXJUaGluZ3ModW5pdHRlc3QuVGVzdENhc2UpOgoKICAgIEBwb2ludHMoJzIuMScpCiAgICBkZWYgdGVzdF9mYWlsaW5nKHNlbGYpOgogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoJ2Zvb2JhcicsICdmb28nKQoKICAgIEBwb2ludHMoJzIuMicpCiAgICBkZWYgdGVzdF9oZWxsbyhzZWxmKToKICAgICAgICBzeXMuc3Rkb3V0ID0gU3RyaW5nSU8uU3RyaW5nSU8oKQogICAgICAgIGhlbGxvKCkKICAgICAgICBvdXRwdXQgPSBzeXMuc3Rkb3V0LmdldHZhbHVlKCkuc3RyaXAoKQogICAgICAgIHN5cy5zdGRvdXQgPSBzeXMuX19zdGRvdXRfXwoKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG91dHB1dCwgJ0hlbGxvIHdvcmxkIScpCgpAcG9pbnRzKCczLjEnLCAnMy4yJykKY2xhc3MgVGVzdENsYXNzUG9pbnRzKHVuaXR0ZXN0LlRlc3RDYXNlKToKICAgIAogICAgZGVmIHRlc3RfdHJ1ZShzZWxmKToKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKCdmb28nLCAnZm9vJykKCiAgICBkZWYgdGVzdF90cnVlYWdhaW4oc2VsZik6CiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCgnZm9vJywgJ2ZvbycpCiAgICAKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgICMgUnVubmluZyB0ZXN0cyByZXF1aXJlcyB2ZXJib3NpdHkgPiAxIGF0IHRoZSBtb21lbnQgCiAgICAjIE1ha2Ugc3VyZSB0byBydW4gd2l0aCBjb21tYW5kIHVuaXR0ZXN0Lm1haW4oMikgb3IgZXF1YWwKICAgIHVuaXR0ZXN0Lm1haW4oMikKYAoKc2VsZi5vbm1lc3NhZ2UgPSBmdW5jdGlvbihlKSB7CiAgY29uc3QgeyB0eXBlLCBtc2cgfSA9IGUuZGF0YQogIGlmICh0eXBlID09PSAicnVuIikgewogICAgaW50ZXJ2YWxNYW5hZ2VyKHRydWUpCiAgICBydW5uaW5nID0gdHJ1ZQogICAgcHJpbnRCdWZmZXIgPSBbXQogICAgcnVuKG1zZykKICB9IGVsc2UgaWYgKHR5cGUgPT09ICJzdG9wIikgewogICAgaW50ZXJ2YWxNYW5hZ2VyKGZhbHNlKQogIH0gZWxzZSBpZiAodHlwZSA9PT0gInJ1blRlc3RzIikgewogICAgdGVzdGluZyA9IHRydWUKICAgIGlmICghbXNnKSB7CiAgICAgIHJ1bihkZWZhdWx0VGVzdCkKICAgIH0gZWxzZSB7CiAgICAgIHJ1bihtc2cpCiAgICB9CiAgfQp9Cg=="
